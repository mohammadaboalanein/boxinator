{"ast":null,"code":"class Backend {\n  hexToRgb(hex) {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  rgbToHex(rgb) {\n    var rgbRegex = /^rgb\\(\\s*(-?\\d+)(%?)\\s*,\\s*(-?\\d+)(%?)\\s*,\\s*(-?\\d+)(%?)\\s*\\)$/;\n    var result,\n        r,\n        g,\n        b,\n        hex = \"\";\n\n    if (result = rgbRegex.exec(rgb)) {\n      r = componentFromStr(result[1], result[2]);\n      g = componentFromStr(result[3], result[4]);\n      b = componentFromStr(result[5], result[6]);\n      hex = \"#\" + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1);\n      console.log(result[5]);\n    }\n\n    return hex;\n  }\n\n}\n\nfunction componentFromStr(numStr, percent) {\n  var num = Math.max(0, parseInt(numStr, 10));\n  return percent ? Math.floor(255 * Math.min(100, num) / 100) : Math.min(255, num);\n}\n\nexport default Backend;","map":{"version":3,"sources":["/Users/mohammadaboalanein/Documents/react_projects/myboxinator/client/src/backend/Backend.js"],"names":["Backend","hexToRgb","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","rgbToHex","rgb","rgbRegex","componentFromStr","toString","slice","console","log","numStr","percent","num","Math","max","floor","min"],"mappings":"AAAA,MAAMA,OAAN,CAAc;AACZC,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACZ,QAAIC,cAAc,GAAG,kCAArB;AACAD,IAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAYD,cAAZ,EAA4B,UAAUE,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACtD,aAAOF,CAAC,GAAGA,CAAJ,GAAQC,CAAR,GAAYA,CAAZ,GAAgBC,CAAhB,GAAoBA,CAA3B;AACD,KAFK,CAAN;AAGA,QAAIC,MAAM,GAAG,4CAA4CC,IAA5C,CAAiDR,GAAjD,CAAb;AACA,WAAOO,MAAM,GAAG;AACdH,MAAAA,CAAC,EAAEK,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CADG;AAEdF,MAAAA,CAAC,EAAEI,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFG;AAGdD,MAAAA,CAAC,EAAEG,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ;AAHG,KAAH,GAIT,IAJJ;AAMD;;AAGDG,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACZ,QAAIC,QAAQ,GAAG,gEAAf;AAEA,QAAIL,MAAJ;AAAA,QAAYH,CAAZ;AAAA,QAAeC,CAAf;AAAA,QAAkBC,CAAlB;AAAA,QAAqBN,GAAG,GAAG,EAA3B;;AACA,QAAKO,MAAM,GAAGK,QAAQ,CAACJ,IAAT,CAAcG,GAAd,CAAd,EAAmC;AACjCP,MAAAA,CAAC,GAAGS,gBAAgB,CAACN,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAApB;AACAF,MAAAA,CAAC,GAAGQ,gBAAgB,CAACN,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAApB;AACAD,MAAAA,CAAC,GAAGO,gBAAgB,CAACN,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAApB;AAEAP,MAAAA,GAAG,GAAG,MAAM,CAAC,aAAaI,CAAC,IAAI,EAAlB,KAAyBC,CAAC,IAAI,CAA9B,IAAmCC,CAApC,EAAuCQ,QAAvC,CAAgD,EAAhD,EAAoDC,KAApD,CAA0D,CAA1D,CAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAAC,CAAD,CAAlB;AACD;;AACD,WAAOP,GAAP;AACD;;AA7BW;;AAkCd,SAASa,gBAAT,CAA0BK,MAA1B,EAAkCC,OAAlC,EAA2C;AACzC,MAAIC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYb,QAAQ,CAACS,MAAD,EAAS,EAAT,CAApB,CAAV;AACA,SAAOC,OAAO,GACZE,IAAI,CAACE,KAAL,CAAW,MAAMF,IAAI,CAACG,GAAL,CAAS,GAAT,EAAcJ,GAAd,CAAN,GAA2B,GAAtC,CADY,GACiCC,IAAI,CAACG,GAAL,CAAS,GAAT,EAAcJ,GAAd,CAD/C;AAED;;AAID,eAAetB,OAAf","sourcesContent":["class Backend {\n  hexToRgb(hex) {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n\n  }\n\n  \n  rgbToHex(rgb) {\n    var rgbRegex = /^rgb\\(\\s*(-?\\d+)(%?)\\s*,\\s*(-?\\d+)(%?)\\s*,\\s*(-?\\d+)(%?)\\s*\\)$/;\n  \n    var result, r, g, b, hex = \"\";\n    if ((result = rgbRegex.exec(rgb))) {\n      r = componentFromStr(result[1], result[2]);\n      g = componentFromStr(result[3], result[4]);\n      b = componentFromStr(result[5], result[6]);\n  \n      hex = \"#\" + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1);\n      console.log(result[5]);\n    }\n    return hex;\n  }\n\n  \n}\n\nfunction componentFromStr(numStr, percent) {\n  var num = Math.max(0, parseInt(numStr, 10));\n  return percent ?\n    Math.floor(255 * Math.min(100, num) / 100) : Math.min(255, num);\n}\n\n\n\nexport default Backend;"]},"metadata":{},"sourceType":"module"}